/*  */

@mixin _assert-ascending($map, $map-name) {
    $prev-key: null;
    $prev-num: null;
    @each $key,
    $num in $map {
        @if $prev-num==null {
            // Do nothing
        }
        @else if not comparable($prev-num, $num) {
            @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        }
        @else if $prev-num>=$num {
            @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        }
        $prev-key: $key;
        $prev-num: $num;
    }
}

@mixin clearfix() {
    &::after {
        display: block;
        content: "";
        clear: both;
    }
}

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@mixin _assert-starts-at-zero($map) {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value !=0 {
        @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
    }
}

$enable-grid-classes:true;
$grid-columns: 12 !default;
$grid-gutter-width-base: 0px !default;
$grid-gutter-widths: ( xs: $grid-gutter-width-base, sm: $grid-gutter-width-base, md: $grid-gutter-width-base, lg: $grid-gutter-width-base, xl: $grid-gutter-width-base) !default;
// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.
$spacer: 1rem !default;
$spacer-x: $spacer !default;
$spacer-y: $spacer !default;
$spacers: ( 0: ( x: 0, y: 0), 1: ( x: ($spacer-x * .25), y: ($spacer-y * .25)), 2: ( x: ($spacer-x * .5), y: ($spacer-y * .5)), 3: ( x: $spacer-x, y: $spacer-y), 4: ( x: ($spacer-x * 1.5), y: ($spacer-y * 1.5)), 5: ( x: ($spacer-x * 3), y: ($spacer-y * 3))) !default;
$border-width: 1px !default;
// This variable affects the `.h-*` and `.w-*` classes.
$sizes: ( 25: 25%, 50: 50%, 75: 75%, 100: 100%) !default;
$grid-breakpoints: ( xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl:1471px) !default;
@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-starts-at-zero($grid-breakpoints);
// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.
// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min !=0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }
    @else {
        @content;
    }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }
    @else {
        @content;
    }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
    @include media-breakpoint-up($lower, $breakpoints) {
        @include media-breakpoint-down($upper, $breakpoints) {
            @content;
        }
    }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
    @include media-breakpoint-between($name, $name, $breakpoints) {
        @content;
    }
}


/* ============= */

// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.
$container-max-widths: ( sm: 540px, md: 720px, lg: 960px, xl: 1200px, xxl:1441px) !default;
@include _assert-ascending($container-max-widths, "$container-max-widths");
// Grid columns
//
// Set the number of columns and specify the width of the gutters.
$grid-columns: 12 !default;
$grid-gutter-width-base: 30px !default;
$grid-gutter-widths: ( xs: $grid-gutter-width-base, sm: $grid-gutter-width-base, md: $grid-gutter-width-base, lg: $grid-gutter-width-base, xl: $grid-gutter-width-base, xxl: $grid-gutter-width-base) !default;

/* ============ */

// any value of `$grid-columns`.
@mixin make-grid-columns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
    // Common properties for all breakpoints
    %grid-column {
        position: relative;
        width: 100%;
        min-height: 1px; // Prevent columns from collapsing when empty
        @include make-gutters($gutters);
    }
    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);
        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $columns {
            .col#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }
        .col#{$infix} {
            @extend %grid-column;
        }
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }
            .col#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
            }
            @for $i from 1 through $columns {
                .col#{$infix}-#{$i} {
                    @include make-col($i, $columns);
                }
            }
            @each $modifier in (pull, push) {
                @for $i from 0 through $columns {
                    .#{$modifier}#{$infix}-#{$i} {
                        @include make-col-modifier($modifier, $i, $columns)
                    }
                }
            }
            // `$columns - 1` because offsetting by the width of an entire row isn't possible
            @for $i from 0 through ($columns - 1) {
                @if not ($infix=="" and $i==0) {
                    // Avoid emitting useless .offset-xs-0
                    .offset#{$infix}-#{$i} {
                        @include make-col-modifier(offset, $i, $columns)
                    }
                }
            }
        }
    }
}


/* =========================== */

/// Grid system
//
// Generate semantic grid columns with these mixins.
@mixin make-container($gutters: $grid-gutter-widths) {
    position: relative;
    margin-left: auto;
    margin-right: auto;
    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            padding-right: ($gutter / 2);
            padding-left: ($gutter / 2);
        }
    }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint,
    $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            width: $container-max-width;
            max-width: 100%;
        }
    }
}

@mixin make-gutters($gutters: $grid-gutter-widths) {
    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            padding-right: ($gutter / 2);
            padding-left: ($gutter / 2);
        }
    }
}

@mixin make-row($gutters: $grid-gutter-widths) {
    display: flex;
    flex-wrap: wrap;
    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            margin-right: ($gutter / -2);
            margin-left: ($gutter / -2);
        }
    }
}

@mixin make-col-ready($gutters: $grid-gutter-widths) {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    min-height: 1px; // Prevent collapsing
    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            padding-right: ($gutter / 2);
            padding-left: ($gutter / 2);
        }
    }
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // width: percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
    left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
    right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
    // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
    @if $type==push {
        @include make-col-push($size, $columns);
    }
    @else if $type==pull {
        @include make-col-pull($size, $columns);
    }
    @else if $type==offset {
        @include make-col-offset($size, $columns);
    }
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
@if $enable-grid-classes {
    .container {
        @include make-container();
        @include make-container-max-widths();
    }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.
@if $enable-grid-classes {
    .container-fluid {
        @include make-container();
    }
}

// Row
//
// Rows contain and clear the floats of your columns.
@if $enable-grid-classes {
    .row {
        @include make-row();
    }
    // Remove the negative margin from default .row, then the horizontal padding
    // from all immediate children columns (to prevent runaway style inheritance).
    .no-gutters {
        margin-right: 0;
        margin-left: 0;
        >.col,
        >[class*="col-"] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}

// Columns
//
// Common styles for small and large grid columns
@if $enable-grid-classes {
    @include make-grid-columns();
}

// Flex variation
//
// Custom styles for additional flex alignment options.
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
        .flex#{$infix}-first {
            order: -1;
        }
        .flex#{$infix}-last {
            order: 1;
        }
        .flex#{$infix}-unordered {
            order: 0;
        }
        .flex#{$infix}-row {
            flex-direction: row !important;
        }
        .flex#{$infix}-column {
            flex-direction: column !important;
        }
        .flex#{$infix}-row-reverse {
            flex-direction: row-reverse !important;
        }
        .flex#{$infix}-column-reverse {
            flex-direction: column-reverse !important;
        }
        .flex#{$infix}-wrap {
            flex-wrap: wrap !important;
        }
        .flex#{$infix}-nowrap {
            flex-wrap: nowrap !important;
        }
        .flex#{$infix}-wrap-reverse {
            flex-wrap: wrap-reverse !important;
        }
        .justify-content#{$infix}-start {
            justify-content: flex-start !important;
        }
        .justify-content#{$infix}-end {
            justify-content: flex-end !important;
        }
        .justify-content#{$infix}-center {
            justify-content: center !important;
        }
        .justify-content#{$infix}-between {
            justify-content: space-between !important;
        }
        .justify-content#{$infix}-around {
            justify-content: space-around !important;
        }
        .align-items#{$infix}-start {
            align-items: flex-start !important;
        }
        .align-items#{$infix}-end {
            align-items: flex-end !important;
        }
        .align-items#{$infix}-center {
            align-items: center !important;
        }
        .align-items#{$infix}-baseline {
            align-items: baseline !important;
        }
        .align-items#{$infix}-stretch {
            align-items: stretch !important;
        }
        .align-content#{$infix}-start {
            align-content: flex-start !important;
        }
        .align-content#{$infix}-end {
            align-content: flex-end !important;
        }
        .align-content#{$infix}-center {
            align-content: center !important;
        }
        .align-content#{$infix}-between {
            align-content: space-between !important;
        }
        .align-content#{$infix}-around {
            align-content: space-around !important;
        }
        .align-content#{$infix}-stretch {
            align-content: stretch !important;
        }
        .align-self#{$infix}-auto {
            align-self: auto !important;
        }
        .align-self#{$infix}-start {
            align-self: flex-start !important;
        }
        .align-self#{$infix}-end {
            align-self: flex-end !important;
        }
        .align-self#{$infix}-center {
            align-self: center !important;
        }
        .align-self#{$infix}-baseline {
            align-self: baseline !important;
        }
        .align-self#{$infix}-stretch {
            align-self: stretch !important;
        }
    }
}

// Width and height
@each $prop,
$abbrev in (width: w, height: h) {
    @each $size,
    $length in $sizes {
        .#{$abbrev}-#{$size} {
            #{$prop}: $length !important;
        }
    }
}

.mw-100 {
    max-width: 100% !important;
}

.mh-100 {
    max-height: 100% !important;
}

// Margin and Padding
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
        @each $prop,
        $abbrev in (margin: m, padding: p) {
            @each $size, $lengths in $spacers {
                $length-x: map-get($lengths, x);
                $length-y: map-get($lengths, y);
                .#{$abbrev}#{$infix}-#{$size} {
                    #{$prop}: $length-y $length-x !important;
                }
                .#{$abbrev}t#{$infix}-#{$size} {
                    #{$prop}-top: $length-y !important;
                }
                .#{$abbrev}r#{$infix}-#{$size} {
                    #{$prop}-right: $length-x !important;
                }
                .#{$abbrev}b#{$infix}-#{$size} {
                    #{$prop}-bottom: $length-y !important;
                }
                .#{$abbrev}l#{$infix}-#{$size} {
                    #{$prop}-left: $length-x !important;
                }
                .#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-right: $length-x !important;
                    #{$prop}-left: $length-x !important;
                }
                .#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-top: $length-y !important;
                    #{$prop}-bottom: $length-y !important;
                }
            }
        }
        // Some special margin utils
        .m#{$infix}-auto {
            margin: auto !important;
        }
        .mt#{$infix}-auto {
            margin-top: auto !important;
        }
        .mr#{$infix}-auto {
            margin-right: auto !important;
        }
        .mb#{$infix}-auto {
            margin-bottom: auto !important;
        }
        .ml#{$infix}-auto {
            margin-left: auto !important;
        }
        .mx#{$infix}-auto {
            margin-right: auto !important;
            margin-left: auto !important;
        }
        .my#{$infix}-auto {
            margin-top: auto !important;
            margin-bottom: auto !important;
        }
    }
}

//
// Visibility utilities
//
@mixin invisible {
    visibility: hidden !important;
}

.invisible {
    @include invisible();
}

// Responsive visibility utilities
@each $bp in map-keys($grid-breakpoints) {
    .hidden-#{$bp}-up {
        @include media-breakpoint-up($bp) {
            display: none !important;
        }
    }
    .hidden-#{$bp}-down {
        @include media-breakpoint-down($bp) {
            display: none !important;
        }
    }
}

// Print utilities
//
// Media queries are placed on the inside to be mixin-friendly.
.visible-print-block {
    display: none !important;
    @media print {
        display: block !important;
    }
}

.visible-print-inline {
    display: none !important;
    @media print {
        display: inline !important;
    }
}

.visible-print-inline-block {
    display: none !important;
    @media print {
        display: inline-block !important;
    }
}

.hidden-print {
    @media print {
        display: none !important;
    }
}