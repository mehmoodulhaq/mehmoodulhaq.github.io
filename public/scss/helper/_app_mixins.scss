$input-base-color:white;
$input-accent-color:white;
@mixin input( $disabled-color, $base-color:$input-base-color, $accent-color:$input-accent-color) {
    box-sizing: border-box;
    min-height: rem(39);
    width: 100%;
    padding: rem(10);
    margin-bottom: rem(10);
    font-family: inherit;
    font-size: rem(14);
    vertical-align: middle;
    border: rem(1) solid lighten($base-color, 10%);
    border-radius: rem(3);
    outline: none;
    background-color: white;
    &:focus {
        border-color: $accent-color;
    }
    &:disabled {
        background-color: $disabled-color;
        cursor: not-allowed;
    }
}

@mixin mq($media) {
    @media only screen and #{$media} {
        @content;
    }
}

@mixin font-face($style-name, $file, $family, $category:'sans-serif') {
    $filepath: "assets/fonts/" + $family + "/" + $file;
    @font-face {
        font-family: "#{$style-name}";
        src: url($filepath + ".ttf") format('truetype'), /*  src: url($filepath + ".eot?#iefix") format('embedded-opentype'), url($filepath + ".woff") format('woff'), url($filepath + ".ttf")  format('truetype'), url($filepath + ".svg#" + $style-name + "") format('svg'); */
    }
    %#{$style-name} {
        font: {
            @if $category !="" {
                family: "#{$style-name}",
                #{$category};
            }
            @else {
                family: "#{$style-name}";
                weight: normal;
            }
        }
    }
}

/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {
    @each $property,
    $value in $declarations {
        @each $prefix in $prefixes {
            #{'-' + $prefix + '-' + $property}: $value;
        }
        // Output standard non-prefixed declaration
        #{$property}: $value;
    }
}


/*
.selector {
  @include prefix((
    column-count: 3,
    column-gap: 1.5em,
    column-rule: 2px solid hotpink
  ), webkit moz);
}
         z-index: 3;

*/


/* 
@include font-face($style-name, $file, $family, $category);

$style-name being the name of the font e.g. Helvetica
$file meaning the file name, without the file extensions
$family being the folder inside the fonts folder where the font files are
$category is serif or sans-serif or monospace etc. as a fall back in CSS

example:
@include font-face('Ashbury', 'AshburyLig-webfont', 'Ashbury', 'serif');
 */

@mixin placeholder {
     ::-webkit-input-placeholder {
        @content
    }
     :-moz-placeholder {
        @content
    }
     ::-moz-placeholder {
        @content
    }
     :-ms-input-placeholder {
        @content
    }
}

// inner shadow mixin thin solid lightgraycolour to see effects of mixin
$bg: lightblue;
$header: rgba(darken($bg, 25%), 0.15);
$default-shadowcolor: rgba(darken($bg, 80%), .3);
@mixin inner-shadow($background, $shadowcolor: $default-shadowcolor, $highlight: lighten($bg, 15%)) {
    text-shadow: 1px 2px 8px $background,
    0 0 0 $shadowcolor,
    1px 2px 8px $bg,
    2px 2px 0px #{$highlight};
}

@mixin gradient-bg-2($begin_color, $end_color) {
    background: $begin_color;
    /* Old browsers */
    /* IE9 SVG, needs conditional override of 'filter' to 'none' */
    background: -moz-linear-gradient(top, $begin_color 0%, $end_color 100%);
    /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $begin_color), color-stop(100%, $end_color));
    /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top, $begin_color 0%, $end_color 100%);
    /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, $begin_color 0%, $end_color 100%);
    /* Opera 11.10+ */
    background: -ms-linear-gradient(top, $begin_color 0%, $end_color 100%);
    /* IE10+ */
    background: linear-gradient(to bottom, $begin_color 0%, $end_color 100%);
    /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$begin_color', endColorstr='$end_color', GradientType=0);
    /* IE6-8 */
}

@mixin gradient-bg-3($begin_color, $middle_color, $end_color) {
    background: $begin_color;
    /* Old browsers */
    /* IE9 SVG, needs conditional override of 'filter' to 'none' */
    background: -moz-linear-gradient(top, $begin_color 0%, $middle_color 50%, $end_color 100%);
    /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $begin_color), color-stop(50%, $middle_color), color-stop(100%, $end_color));
    /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top, $begin_color 0%, $middle_color 50%, $end_color 100%);
    /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, $begin_color 0%, $middle_color 50%, $end_color 100%);
    /* Opera 11.10+ */
    background: -ms-linear-gradient(top, $begin_color 0%, $middle_color 50%, $end_color 100%);
    /* IE10+ */
    background: linear-gradient(to bottom, $begin_color 0%, $middle_color 50%, $end_color 100%);
    /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$begin_color', endColorstr='$end_color', GradientType=0);
    /* IE6-8 */
}

@mixin blur ($PixelRadius, $radius) {
    filter: blur($PixelRadius);
    // -webkit-filter: blur($PixelRadius);
    // -moz-filter: blur($PixelRadius);
    // -ms-filter: blur($PixelRadius);
    // -o-filter: blur($PixelRadius);
    /* FF doesn't support blur filter, but SVG */
    filter: url("data:image/svg+xml;utf8,<svg height='0' xmlns='http://www.w3.org/2000/svg'><filter id='svgBlur' x='-5%' y='-5%' width='110%' height='110%'><feGaussianBlur in='SourceGraphic' stdDeviation='5'/></filter></svg>#svgBlur");
    filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius=#{$radius});
    filter: blur($PixelRadius);
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
    @if $depth < 1 {
        box-shadow: none;
    }
    @else if $depth>5 {
        @warn "Invalid $depth `#{$depth}` for mixin `card`.";
    }
    @else {
        box-shadow: bottom-shadow($depth), top-shadow($depth);
    }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
    $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
    $blur: nth(1.5 3 10 14 19, $depth) * 4px;
    $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));
    @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
    $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
    $blur: nth(1 3 3 5 6, $depth) * 4px;
    $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));
    @return 0 $primary-offset $blur $color;
}

$text-shadow :0 1px 3px rgba(0,
0,
0,
0.25);
@mixin text-shadow ($string) {
    text-shadow: $string;
}